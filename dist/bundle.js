(()=>{"use strict";var t;!function(t){t.image="image",t.name="name",t.status="status",t.species="species",t.type="type",t.origin="origin",t.episode="episode"}(t||(t={}));class e extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return Object.keys(t)}attributeChangedCallback(t,e,n){this[t]=n,this.render()}connectedCallback(){this.render(),console.log("holaaa")}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n            <article>\n                <img src='${this.image}'/>\n                <h2>${this.name}</h2>\n                <p>Status: ${this.status}</p>\n                <p>Specie: ${this.species}</p>\n                <p>Type: ${this.type}</p>\n                <p>Origin: ${this.origin}</p>\n                <p>Episode: ${this.episode}</p>\n            </article>\n            `)}}customElements.define("character-data",e);const n=e;class o extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.attachListeners()}attachListeners(){var t,e;const n=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("button"),o=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("input");console.log("Listeners attached"),null==n||n.addEventListener("click",(()=>{return t=this,e=void 0,s=function*(){console.log("Button clicked");const t=o?parseInt(o.value,10):0;if(console.log(`Input value: ${t}`),t>0){const o=yield(e=void 0,n=void 0,s=void 0,i=function*(){try{const t=yield fetch("https://rickandmortyapi.com/api/character");return yield t.json()}catch(t){console.log(t)}},new(s||(s=Promise))((function(t,o){function r(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s((function(t){t(n)}))).then(r,a)}c((i=i.apply(e,n||[])).next())})));console.log(o),this.renderCharacters(o.results.slice(0,t)),console.log(o.results.slice(0,t))}else alert("Por favor, ingrese un n√∫mero mayor a 0");var e,n,s,i},new((n=void 0)||(n=Promise))((function(o,i){function r(t){try{c(s.next(t))}catch(t){i(t)}}function a(t){try{c(s.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}c((s=s.apply(t,e||[])).next())}));var t,e,n,s}))}render(){this.shadowRoot&&(this.shadowRoot.innerHTML='\n                <h1>Rick and Morty Characters</h1>\n                <input type="number" min="1" placeholder="Number of characters" />\n                <button>Submit</button>\n                <div id="characters-container"></div>\n            ')}renderCharacters(t){var e;const o=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("#characters-container");o&&(o.innerHTML="",t.forEach((t=>{const e=new n;e.setAttribute("image",t.image),e.setAttribute("name",t.name),e.setAttribute("status",t.status),e.setAttribute("species",t.species),e.setAttribute("type",t.type||"Unknown"),e.setAttribute("origin",t.origin.name),e.setAttribute("episode",t.episode[0]),o.appendChild(e)}))),console.log(`Characters rendered: ${t}`)}}customElements.define("app-container",o)})();